plugins {
  id 'SwimRuntimeFramework'
  id 'SwimRuntimePublish'
}

description = 'Swim Runtime'
ext.homepage = 'https://github.com/swimos/swim/tree/main/swim-java/swim-runtime-java'
ext.moduleName = null

dependencies {
  api project(':swim-core')
  api project(':swim-host')
  api project(':swim-polyglot')
}

javadoc {
  title 'Swim Runtime'
  options.overview = "${projectDir}/overview.html"
  options.group('Core',
                'swim.args',
                'swim.avro',
                'swim.codec',
                'swim.collections',
                'swim.concurrent',
                'swim.csv',
                'swim.dataflow',
                'swim.db',
                'swim.deflate',
                'swim.http',
                'swim.http2',
                'swim.io',
                'swim.io.http',
                'swim.io.mqtt',
                'swim.io.warp',
                'swim.io.ws',
                'swim.json',
                'swim.math',
                'swim.mqtt',
                'swim.observable',
                'swim.protobuf',
                'swim.recon',
                'swim.security',
                'swim.spatial',
                'swim.streamlet',
                'swim.structure',
                'swim.uri',
                'swim.util',
                'swim.warp',
                'swim.web',
                'swim.ws',
                'swim.xml')
  options.group('Host',
                'swim.api',
                'swim.auth',
                'swim.cli',
                'swim.client',
                'swim.actor',
                'swim.java',
                'swim.kernel',
                'swim.meta',
                'swim.remote',
                'swim.server',
                'swim.service',
                'swim.service.web',
                'swim.store',
                'swim.store.db',
                'swim.store.mem',
                'swim.system')
  options.group('Polyglot',
                'swim.dynamic',
                'swim.dynamic.api',
                'swim.dynamic.java',
                'swim.dynamic.observable',
                'swim.dynamic.structure',
                'swim.js',
                'swim.vm',
                'swim.vm.js')

  // Google Analytics Tracking Code
  options.addBooleanOption("-allow-script-in-comments", true)
  options.header = "<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-79441805-2\"></script>\n";
                   "<script>\n";
                   "  window.dataLayer = window.dataLayer || [];\n";
                   "  function gtag(){dataLayer.push(arguments);}\n";
                   "  gtag('js', new Date());\n";
                   "  gtag('config', 'UA-79441805-2');\n";
                   "</script>\n";

  options.addStringOption('-module-source-path', [
                          "${projectDir}/swim-core-java/*/src/main/java",
                          "${projectDir}/swim-host-java/*/src/main/java",
                          "${projectDir}/swim-polyglot-java/*/src/main/java"].join(':'))
}

subprojects {
  afterEvaluate {
    localizeDependencies(project) // override maven dependencies with project dependencies
  }
}

def localizeDependencies(subproject) {
  if (subproject.plugins.hasPlugin(JavaLibraryPlugin)) {
    subproject.configurations.api.dependencies.toArray().each { dependency ->
      if (dependency instanceof ExternalModuleDependency && dependency.group == "org.swimos") {
        subproject.configurations.api.dependencies.remove(dependency)
        subproject.dependencies {
          api project(':' + dependency.name)
        }
      }
    }
    subproject.configurations.implementation.dependencies.toArray().each { dependency ->
      if (dependency instanceof ExternalModuleDependency && dependency.group == "org.swimos") {
        subproject.configurations.implementation.dependencies.remove(dependency)
        subproject.dependencies {
          implementation project(':' + dependency.name)
        }
      }
    }
    subproject.configurations.testImplementation.dependencies.toArray().each { dependency ->
      if (dependency instanceof ExternalModuleDependency && dependency.group == "org.swimos") {
        subproject.configurations.testImplementation.dependencies.remove(dependency)
        subproject.dependencies {
          testImplementation project(':' + dependency.name)
        }
      }
    }
  }
}
