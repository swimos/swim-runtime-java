plugins {
  id 'com.jfrog.bintray' version '1.8.4'
}

// Build with `gradle -Pno-modules` to force compatibility with legacy JVMs.
def javaVersion = System.getProperty('java.version').split('\\.')
ext.jvmVersion = (javaVersion[0] as Integer) > 1 ? javaVersion[0] as Integer : javaVersion[1] as Integer
ext.useModules = jvmVersion >= 9 && !hasProperty('no-modules')
ext.graalVersion = project.property('graal.version')

def redepend(subproject) {
  subproject.configurations.api.dependencies.toArray().each { dependency ->
    if (dependency instanceof ExternalModuleDependency && dependency.group == "org.swimos") {
      subproject.configurations.api.dependencies.remove(dependency)
      subproject.dependencies {
        api project(':' + dependency.name)
      }
    }
  }
  subproject.configurations.implementation.dependencies.toArray().each { dependency ->
    if (dependency instanceof ExternalModuleDependency && dependency.group == "org.swimos") {
      subproject.configurations.implementation.dependencies.remove(dependency)
      subproject.dependencies {
        implementation project(':' + dependency.name)
      }
    }
  }
  subproject.configurations.testImplementation.dependencies.toArray().each { dependency ->
    if (dependency instanceof ExternalModuleDependency && dependency.group == "org.swimos") {
      subproject.configurations.testImplementation.dependencies.remove(dependency)
      subproject.dependencies {
        testImplementation project(':' + dependency.name)
      }
    }
  }
}

subprojects {
  afterEvaluate {
    redepend(project) // override maven dependencies with project dependencies
  }
}

gradle.projectsEvaluated {
  apply plugin: 'java'

  def javaProjects = subprojects.findAll { subproject -> subproject.plugins.hasPlugin(JavaPlugin) }

  if (useModules) {
    javaProjects.each { project ->
      compileJava.dependsOn project.tasks.compileModuleInfoJava
    }
  }

  javadoc {
    title 'Swim System'
    options.overview = "${projectDir}/overview.html"
    if (useModules) {
      options.group('Core',
        'swim.args',
        'swim.avro',
        'swim.codec',
        'swim.collections',
        'swim.concurrent',
        'swim.csv',
        'swim.dataflow',
        'swim.db',
        'swim.decipher',
        'swim.deflate',
        'swim.http',
        'swim.io',
        'swim.io.http',
        'swim.io.mqtt',
        'swim.io.warp',
        'swim.io.ws',
        'swim.json',
        'swim.math',
        'swim.mqtt',
        'swim.observable',
        'swim.protobuf',
        'swim.recon',
        'swim.security',
        'swim.spatial',
        'swim.streamlet',
        'swim.structure',
        'swim.uri',
        'swim.util',
        'swim.warp',
        'swim.web',
        'swim.ws',
        'swim.xml')
      options.group('Mesh',
        'swim.api',
        'swim.auth',
        'swim.cli',
        'swim.client',
        'swim.actor',
        'swim.java',
        'swim.kernel',
        'swim.remote',
        'swim.runtime',
        'swim.server',
        'swim.service',
        'swim.service.web',
        'swim.store',
        'swim.store.db',
        'swim.store.mem')
      options.group('Polyglot',
        'swim.dynamic',
        'swim.dynamic.api',
        'swim.dynamic.java',
        'swim.dynamic.observable',
        'swim.dynamic.structure',
        'swim.js',
        'swim.vm',
        'swim.vm.js')
    }

    // Google Analytics Tracking Code
    options.addBooleanOption("-allow-script-in-comments", true)
    options.header = "<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-79441805-2\"></script>\n" +
                     "<script>\n" +
                     "  window.dataLayer = window.dataLayer || [];\n" +
                     "  function gtag(){dataLayer.push(arguments);}\n" +
                     "  gtag('js', new Date());\n" +
                     "  gtag('config', 'UA-79441805-2');\n" +
                     "</script>\n";

    source javaProjects.collect { project -> project.sourceSets.main.allJava }
    doFirst {
      if (useModules) {
        def modules = javaProjects.collect { project -> project.moduleName }
        options.addStringOption('-module', modules.join(','))
        options.addStringOption('-module-source-path', [
          "${projectDir}/swim-core-java/*/src/main/java",
          "${projectDir}/swim-mesh-java/*/src/main/java",
          "${projectDir}/swim-polyglot-java/*/src/main/java"].join(':'))
        def classpaths = javaProjects.collect { project -> project.sourceSets.main.compileClasspath.asPath }
        options.addStringOption('-module-path', classpaths.join(':'))
        classpath = files()
      } else {
        exclude '*module-info*'
      }
      options.addBooleanOption('Xdoclint:all,-missing', true)
      options.charSet = 'UTF-8'
      options.encoding = 'UTF-8'
      if (jvmVersion >= 9) {
        options.addBooleanOption('html5', true)
      }
      if (jvmVersion >= 11) {
        options.links += ["https://docs.oracle.com/en/java/javase/" + jvmVersion + "/docs/api/"]
      } else {
        options.links += ["https://docs.oracle.com/javase/" + jvmVersion + "/docs/api/"]
      }
    }
  }

  task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
  }

  artifacts {
    archives javadocJar
  }
}
